version: '3.8'

services:
  # BFF Service
  bff-service:
    build: .
    container_name: bff-service
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DELIVERY_SERVICE_URL=${DELIVERY_SERVICE_URL:-http://delivery-service:3001}
      - ORDERS_SERVICE_URL=${ORDERS_SERVICE_URL:-http://orders-service:3002}
      - FUNCTION_CREATE_URL=${FUNCTION_CREATE_URL}
      - FUNCTION_GET_URL=${FUNCTION_GET_URL}
      - SERVICE_TIMEOUT=30000
      - LOG_LEVEL=info
    volumes:
      - ./logs:/app/logs
    networks:
      - erp-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/v1/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Delivery Service (opcional - se quiser rodar junto)
  delivery-service:
    image: iyonuttxd/delivery-service:latest
    container_name: delivery-service
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_SERVER=${DB_SERVER}
      - DB_DATABASE=${DB_DATABASE}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
    networks:
      - erp-network
    profiles:
      - full-stack

  # Orders Service (opcional - se quiser rodar junto)
  orders-service:
    image: iyonuttxd/orders-service:latest
    container_name: orders-service
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - MONGODB_URI=${MONGODB_URI}
    networks:
      - erp-network
    profiles:
      - full-stack

networks:
  erp-network:
    driver: bridge